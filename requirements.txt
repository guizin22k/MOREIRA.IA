import streamlit as st
import openai
import requests
from bs4 import BeautifulSoup
import time

# Fun√ß√£o para buscar resultados na web via DuckDuckGo (scraping)
def buscar_na_web(pergunta, max_results=4):
    """
    Pesquisa no DuckDuckGo e retorna uma lista com os melhores resultados (t√≠tulo, resumo e link).
    """
    try:
        url = f"https://duckduckgo.com/html/?q={pergunta.replace(' ', '+')}"
        headers = {"User-Agent": "Mozilla/5.0 (compatible; MoreiraBot/1.0)"}
        r = requests.get(url, headers=headers, timeout=10)
        if r.status_code == 200:
            soup = BeautifulSoup(r.text, 'html.parser')
            resultados = soup.find_all('div', class_='result__body', limit=max_results)
            lista = []
            for res in resultados:
                a = res.find('a', class_='result__a')
                snippet = res.find('a', class_='result__snippet')
                title = a.get_text() if a else "Sem t√≠tulo"
                href = a['href'] if a and a.has_attr('href') else ""
                resumo = snippet.get_text() if snippet else ""
                lista.append(f"**{title}**\n{resumo}\nüîó {href}")
            return lista if lista else ["Nenhum resultado relevante encontrado."]
        else:
            return [f"Erro na busca: status {r.status_code}"]
    except Exception as e:
        return [f"Erro ao buscar na web: {str(e)}"]

# Prompt de sistema para configurar a IA
def gerar_mensagem_sistema():
    """
    Retorna a mensagem de sistema que configura o comportamento da IA.
    """
    return (
        "Voc√™ √© a MOREIRAGPT 2.0, uma assistente ultra avan√ßada, focada em:\n"
        "- Crescimento pessoal e mental\n"
        "- Disciplina e supera√ß√£o de v√≠cios\n"
        "- Estrat√©gias de vendas, marketing digital, e gera√ß√£o de renda real em 2025\n"
        "- Respostas objetivas, pr√°ticas e altamente aplic√°veis\n"
        "- Linguagem humana, motivadora e atualizada\n"
        "- Entende comandos especiais:\n"
        "    /marketing ‚Äî dicas e t√°ticas para marketing digital de alta convers√£o\n"
        "    /vendas ‚Äî t√©cnicas e estrat√©gias para vender mais e melhor\n"
        "    /h√°bitos ‚Äî sugest√µes para formar rotinas poderosas e disciplina\n"
        "    /web [termo] ‚Äî pesquisa na web com resumo dos melhores resultados\n"
        "Responda SEMPRE de forma clara, convincente e orientada a resultados reais."
    )

# Fun√ß√£o para interpretar comandos especiais no prompt
def interpretar_comando(prompt):
    """
    Detecta comandos especiais no prompt e executa a√ß√µes espec√≠ficas.
    """
    prompt = prompt.strip()
    if prompt.startswith("/web"):
        termo = prompt[4:].strip()
        if termo == "":
            return "Por favor, informe o termo para busca ap√≥s /web."
        resultados = buscar_na_web(termo, max_results=5)
        return "\n\n".join(resultados)
    # Para outros comandos, retornar None para usar GPT normalmente
    return None

# Fun√ß√£o para enviar a requisi√ß√£o √† OpenAI via API oficial
def enviar_mensagem_openai(mensagens, client):
    """
    Envia mensagens para a API OpenAI e retorna a resposta do modelo.
    """
    try:
        resposta = client.chat.completions.create(
            model="gpt-4",
            messages=mensagens,
            temperature=0.8,
            max_tokens=900,
            top_p=1,
            frequency_penalty=0,
            presence_penalty=0.3,
            timeout=15,
        )
        return resposta.choices[0].message.content.strip()
    except Exception as e:
        return f"Erro ao obter resposta da IA: {str(e)}"
